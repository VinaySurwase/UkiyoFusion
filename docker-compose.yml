version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ukiyo_postgres
    environment:
      POSTGRES_USER: ukiyo_user
      POSTGRES_PASSWORD: ukiyo_password
      POSTGRES_DB: ukiyo_fusion
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ukiyo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ukiyo_user -d ukiyo_fusion"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ukiyo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ukiyo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ukiyo_backend
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://ukiyo_user:ukiyo_password@postgres:5432/ukiyo_fusion
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - model_cache:/app/models
      - uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ukiyo_network
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ukiyo_celery
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://ukiyo_user:ukiyo_password@postgres:5432/ukiyo_fusion
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - model_cache:/app/models
      - uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - ukiyo_network
    restart: unless-stopped

  # Celery Beat (Task Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ukiyo_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ukiyo_user:ukiyo_password@postgres:5432/ukiyo_fusion
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ukiyo_network
    restart: unless-stopped

  # React Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ukiyo_frontend
    environment:
      - VITE_API_URL=http://localhost:5000/api
      - VITE_WS_URL=ws://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - ukiyo_network
    restart: unless-stopped

  # Nginx (Development Proxy)
  nginx:
    image: nginx:alpine
    container_name: ukiyo_nginx
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf
      - uploads:/var/www/uploads
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - ukiyo_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  model_cache:
  uploads:

networks:
  ukiyo_network:
    driver: bridge
